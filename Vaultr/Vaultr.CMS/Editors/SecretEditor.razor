@inherits BasePropertyEditor
@inject SecretClients SecretClients

<div class="input-group">

	<input value=@GetValue()
		   @oninput=@(args => SetValue(((string?)args.Value) ?? ""))
		   disabled=@IsEncrypted
		   placeholder=@Placeholder
		   class="form-control @(CssHelper.GetValidationClass(State))" />

	<div class="input-group-append">

		@if (IsEncrypted)
		{
			<button class="btn btn-light" @onclick=UnlockAsync>
				<Icon Name="Unlock" />
			</button>
		}
		else if (IsDecrypted && !IsModified)
		{
			<button class="btn btn-light" @onclick=Lock>
				<Icon Name="Lock" />
			</button>
		}
		else
		{
			<button class="btn btn-light" @onclick=SaveAsync>
				<Icon Name="Save" />
			</button>
		}

	</div>

</div>

@code {
	private string? Value { get; set; }
	private bool IsDecrypted { get; set; }
	private bool IsModified { get; set; }
	private bool IsEmpty => string.IsNullOrEmpty(GetValueAsString());
	private bool IsEncrypted => !IsEmpty && !IsDecrypted;

	private string KeyVaultName => Configuration as string ?? throw new InvalidOperationException("Missing keyvault name in Configuration");

	private SecretClient SecretClient => SecretClients[KeyVaultName];

	private string KeyName => new Uri(GetValueAsString()).AbsolutePath.Split('/').Last();

	private string GetValue()
	{
		var secretUri = GetValueAsString();

		return IsDecrypted
			? (Value ?? "")
			: !IsEmpty
				? "***"
				: "";
	}

	private void SetValue(string value)
	{
		if (!IsEncrypted)
		{
			IsModified = true;
			Value = value;
		}
	}

	private async Task UnlockAsync(MouseEventArgs e)
	{
		var secret = await SecretClient.GetSecretAsync(KeyName);

		IsDecrypted = true;
		Value = secret.Value.Value;

		StateHasChanged();
	}

	private void Lock(MouseEventArgs e)
	{
		Value = null;
		IsDecrypted = false;
		IsModified = false;

		StateHasChanged();
	}

	private async Task SaveAsync(MouseEventArgs e)
	{
		await SecretClient.SetSecretAsync(KeyName, Value);
		Lock(e);
	}
}
